function [fichier_out Stimuli]= MS_2_calc_onset_morphosem(repertoire, fichier)
    if nargin < 2
        repertoire = 'I:\fMRI\MorphoSem\Data\MRI\MorphoSem\sourcedata';
        fichier = 'sub-01_task-morphosem-seq1_run-01_17_06_16_10_27.txt';
    end
    
    [condition,text, duration, ONSETS_TRIGGERS, ONSETS_MS] = importfile_RSA(fullfile(repertoire,fichier));
    
    modTfile = fullfile('I:\fMRI\MorphoSem\scripts\MorphoSem\mutivariate\Study2_RSA\modelRDMs\modT.mat');
    load(modTfile);
    
    ixCum_SuffART = [];
    for iS = 1: numel(suffART)
        ixSuffART = find(strcmp(text, suffART{iS}));
        ixCum_SuffART = [ixCum_SuffART; ixSuffART];
    end

    ixCum_SuffWAT = [];
    for iS = 1: numel(suffWAT)
        ixsuffWAT = find(strcmp(text, suffWAT{iS}));
        ixCum_SuffWAT = [ixCum_SuffWAT;ixsuffWAT];
    end

    ixCum_ART = [];
    for iS = 1: numel(ART)
        ixART = find(strcmp(text, ART{iS}));
        ixCum_ART = [ixCum_ART;ixART];
    end

    ixCum_WAT = [];
    for iS = 1: numel(WAT)
        ixWAT = find(strcmp(text, WAT{iS}));
        ixCum_WAT = [ixCum_WAT;ixWAT];
    end
    
    %% Get hash markers condition
    idxBsl = find(strcmp(condition, 'H'));
  
    
    %% Get slice duration  in sec 
    slice_dur =  (ONSETS_MS(10)/1000)/ ONSETS_TRIGGERS(10);

    %%
% % %     nb_slices_TR = 54/3; % 54 slices multiband 3
% % %     TR = 1.224;
% % %     slice_dur = TR/nb_slices_TR;
% % %     

    %%
    %%
    names = {'suffART', 'suffWAT', 'ART', 'WAT', 'H'}; %% keep the same order for all subjects
    %%  
   	onsets      = {};
	durations   = {};   
      
     for iCond=1:numel(names) 
         I = []; 
         switch(names{iCond})
            case 'suffART'
                 I = ixCum_SuffART;                
            case 'suffWAT'
                 I = ixCum_SuffWAT;               
            case 'ART'
                 I = ixCum_ART;  
            case 'WAT'
                 I = ixCum_WAT;                  
            case 'H'
                I = find(strcmp(condition,'H'));  
         end
         
        onsets{iCond} = (ONSETS_MS(I)/1000);           
        durations{iCond} = duration(I) * slice_dur;             
     end
      
   [path , namefile , ext] = fileparts( fichier);
   fichier_out = fullfile(repertoire,[namefile,'_onsets.mat']);
   save (fichier_out, 'names', 'onsets', 'durations');
   
%    fichier_out = fullfile(repertoire,[namefile,'_otherParam.mat']);
%    save (fichier_out, 'names', 'reacTimes', 'stimuli', 'idStim');
    
end


function [condition,text, duration, ONSETS_TRIGGERS, ONSETS_MS] = importfile_RSA(filename, startRow, endRow)
%% Import data from text file.
% Script for importing data from the following text file:
%
%    I:\fMRI\MorphoSem\Data\MRI\MorphoSem\sourcedata\sub-01_task-morphosem-seq1_run-01_17_06_16_10_27.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/10/05 00:17:24

    %% Initialize variables.
    filename = 'I:\fMRI\MorphoSem\Data\MRI\MorphoSem\sourcedata\sub-01_task-morphosem-seq1_run-01_17_06_16_10_27.txt';
    delimiter = '\t';

    %% Read columns of data as strings:
    % For more information, see the TEXTSCAN documentation.
    formatSpec = '%s%s%*s%*s%s%*s%*s%*s%s%s%[^\n\r]';

    %% Open the text file.
    fileID = fopen(filename,'r');

    %% Read columns of data according to format string.
    % This call is based on the structure of the file used to generate this
    % code. If an error occurs for a different file, try regenerating the code
    % from the Import Tool.
    dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

    %% Close the text file.
    fclose(fileID);

    %% Convert the contents of columns containing numeric strings to numbers.
    % Replace non-numeric strings with NaN.
    raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
    for col=1:length(dataArray)-1
        raw(1:length(dataArray{col}),col) = dataArray{col};
    end
    numericData = NaN(size(dataArray{1},1),size(dataArray,2));

    for col=[3,4,5]
        % Converts strings in the input cell array to numbers. Replaced non-numeric
        % strings with NaN.
        rawData = dataArray{col};
        for row=1:size(rawData, 1);
            % Create a regular expression to detect and remove non-numeric prefixes and
            % suffixes.
            regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
            try
                result = regexp(rawData{row}, regexstr, 'names');
                numbers = result.numbers;

                % Detected commas in non-thousand locations.
                invalidThousandsSeparator = false;
                if any(numbers==',');
                    thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                    if isempty(regexp(numbers, thousandsRegExp, 'once'));
                        numbers = NaN;
                        invalidThousandsSeparator = true;
                    end
                end
                % Convert numeric strings to numbers.
                if ~invalidThousandsSeparator;
                    numbers = textscan(strrep(numbers, ',', ''), '%f');
                    numericData(row, col) = numbers{1};
                    raw{row, col} = numbers{1};
                end
            catch me
            end
        end
    end


    %% Split data into numeric and cell columns.
    rawNumericColumns = raw(:, [3,4,5]);
    rawCellColumns = raw(:, [1,2]);


    %% Replace non-numeric cells with NaN
    R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
    rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

    %% Allocate imported array to column variable names
    condition = rawCellColumns(:, 1);
    text = rawCellColumns(:, 2);
    duration = cell2mat(rawNumericColumns(:, 1));
    ONSETS_TRIGGERS = cell2mat(rawNumericColumns(:, 2));
    ONSETS_MS = cell2mat(rawNumericColumns(:, 3));


    %% Clear temporary variables
    clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns R;
end
