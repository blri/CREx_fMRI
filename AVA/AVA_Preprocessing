function AVA_1_Preprocessing
    % Preprocessing implementation for SPM12
    % Author: Val√©rie Chanoine, Research Engineer at ILCB (http://www.ilcb.fr/)and BLRI (http://www.blri.fr/)
    % Contact: Valerie.Chanoine@univ-amu.fr
    % Co-authors from fMRI platform: Jean-Luc Anton, Julien Sein and Bruno Nazarian from fMRI
    % platform (Centre IRM-INT@CERIMED, Institut de Neurosciences de la Timone, Marseille, France)
    % http://irmf.int.univ-amu.fr/
    % Date: january 15, 2020
    
    clear all;
    
    % Initialise SPM
    spm('defaults','fmri');  
    spm_jobman('initcfg');
   
    %%========= Define parametres in a general struture 'w' ===============
    w.rawDir            = 'G:\AVA\rawData';       % input path 
    w.dataDir           = 'G:\AVA\data\PREPROC';  % output path          
    w.subjDir           = {'sub-pilot1'};
                   
    w.anatDir          	= 'anat';            % anatomical directory (parent=subjDir) 
    w.funcDir           = 'func';            % functional directory (parent=subjDir)
    w.fmapDir           = 'fmap';            % fieldmap directory  (parent=subjDir)
    w.sessions          = {'run-01'}; 
    %w.task              = 'task-LocaAudio2p5';  
    w.task              = 'task-LocaVis2p5'; 
    w.fielmapSpec       = '2p5mm';

    %%===================================================================== 
    % Loop on subjects
    for iS=1:numel(w.subjDir)
             
        w.subName          = w.subjDir{iS};
        w.rawPath          = fullfile(w.rawDir, w.subName);   
        w.subPath          = fullfile (w.dataDir,  w.subName); 
        
        w.funcPath         = fullfile (w.subPath, w.funcDir);
        w.anatPath         = fullfile (w.subPath,  w.anatDir);
        w.fmapPath         = fullfile (w.subPath,  w.fmapDir);
       
        fprintf('==================================================================\n');
        fprintf([w.subjDir{iS} ' Prepare Files...\n']);  
         
        %% Unzip and copy anatomical and functional files (BIDS format)     
%         DoGunzip(w);
%         DoCopyFiles(w);
        
        %% Load (anatomical and functional) json files
        json  = InitJasonParam(w);
       
        %% Parameters	          
        w.TR                = json.RepetitionTime;  % Repetition time (s)
        w.EchoTime          = json.EchoTime*1000;    
        w.ReadoutTime       = json.TotalReadoutTime*1000;                 
        w.blip = 1;
        if (strfind(json.PhaseEncodingDirection, 'j-'))
            w.blip = -1;
        end

        %% Get parameters for slice onset matrix
        w.slice_times       = bsxfun(@times, json.SliceTiming, 1000); % msec conversion
        w.refslice_time    	= w.slice_times(size(w.slice_times,2)/2);  
        w.refslice_index    = size(w.slice_times,2)/2;
          
        fprintf('==================================================================\n');
        fprintf([w.subjDir{iS} ' Preprocessing...\n']);  
        
        cd(w.subPath);
         
        DoFieldMap(w);     
        DoRealignUnwarp(w);
        DoART_Outliers_regression(w) 
        DoCoregister(w);
        DoSegment(w);
        DoNormalise(w);
        DoSmooth(w);
        DoExplicitMask(w);
    


    end    
end

function DoART_Outliers_regression(w)
  normEPI = {};
    for j=1:numel(w.sessions) 
        % Get EPI Normalised files (4D file) per session
        EPI {j} = spm_select('FPList',  w.funcPath, ['^u' w.subName  '_' w.task  '_' w.sessions{j} '_bold\.nii$']);           
    end
    CREx_fMRI_art_batch(EPI, w.subName, w.subPath);
end


function DoGunzip(w) 
    %% Unzip anatomical and functional files
    anat = fullfile(w.rawPath,  'anat');
    cd(anat); 
    gunzip('*.gz');
      
    fmap = fullfile(w.rawPath,  'fmap');
    cd(fmap); 
    gunzip('*.gz');
     
    func = fullfile(w.rawPath, 'func');
    cd(func); 
    gunzip('*.gz'); 
end

function DoCopyFiles(w)
    %% Copy anatomical and functional files for a new analysis
    files{1} = 'anat';
    files{2} = 'fmap';
    files{3} = 'func';   
    
    for iFiles=1:numel(files)   
        %% Define input and outout files
        inputDir  = fullfile(w.rawPath, files{iFiles});      
        outputDir = fullfile(w.subPath, files{iFiles}); 
        if (~file_exist(outputDir))
            mkdir(outputDir)
        end
        %% Copy nifti files
        src = spm_select('FPList', inputDir, [w.subName '.*\.nii$']);  
        for iSrc =1:size(src,1)
            copyfile(src(iSrc,:), outputDir);
        end
        %% Copy json files
        src = spm_select('FPList', inputDir, [w.subName '.*\.json$']);        
        for iSrc =1:size(src,1)
            copyfile(src(iSrc,:), outputDir);
        end       
    end
end

function json = InitJasonParam(w)
    %% Load anatomical and functional json files
    json = [];  
    f1 = spm_select('FPList',  w.funcPath, ['' w.subName  '_' w.task '_' w.sessions{1} '_bold\.json$']); 
    json = loadjson(f1);     
end

function DoFieldMap(w)  
    
    %% fmap fieldmap
    fmap_fmap = spm_select('ExtFPList', w.fmapPath,['^' w.subName  '.*' w.fielmapSpec '.*fieldmap\.nii$'], 1:1);  
   
    %% fmap magnitude  
    fmap_mag = spm_select('ExtFPList', w.fmapPath,['^' w.subName  '.*' w.fielmapSpec '.*magnitude\.nii$'], 1:1); 
     
        
	%% Get the T1 template  
    path_FielpMap = which('Fieldmap');
    [path name ext] = fileparts(path_FielpMap);
    template	=   fullfile(path, 'T1.nii');

    %% Get T1 structural file
    anatFile    =   spm_select('FPList', w.anatPath, ['^' w.subName '.*T1w\.nii$']); 
    
   
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.data.precalcfieldmap.precalcfieldmap = cellstr(fmap_fmap);
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.data.precalcfieldmap.magfieldmap = cellstr(fmap_mag);
    
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.et = [w.EchoTime w.EchoTime];
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.maskbrain = 0; % 1= Magnitude Image is choosen to generate Brain Mask
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.blipdir = w.blip;
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.tert = w.ReadoutTime; % readout time   
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.epifm = 0;  % non-EPI based fieldmap
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.ajm = 0;    % Jacobian use do not use
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.uflags.method = 'Huttonish';    
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.uflags.fwhm = 10;
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.uflags.pad = 15;
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.uflags.ws = 1;
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.mflags.template = cellstr(template);
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.mflags.fwhm = 5;
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.mflags.nerode = 2;
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.mflags.ndilate = 4;
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.mflags.thresh = 0.5;
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.mflags.reg = 0.02;      
  
    
    %%  Get the first EPI volume per session
    for j=1:numel(w.sessions) 
        EPIfile = spm_select('ExtFPList',  w.funcPath, ['^' w.subName  '_' w.task  '.*' w.sessions{j} '_bold\.nii$'], 1:1);        
        matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.session(j).epi = cellstr(EPIfile);      
    end     
     
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.matchvdm = 0;
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.sessname = 'session';
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.writeunwarped = 0;
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.anat = cellstr(anatFile);
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.matchanat = 0;
    
    save(fullfile(w.subPath, 'SPM12_matlabbatch_1_Fieldmap.mat'),'matlabbatch'); 
        
    spm_jobman('run',matlabbatch);        
end

function DoRealignUnwarp(w)
	clear matlabbatch
  
	EPI = {};
    % Loop for sessions
    for j=1:numel(w.sessions)
       % expReg = ['vdm5' w.subName  '.*' w.fielmapSpec '.*' num2str(j) '\.nii$'];
        expReg = ['vdm5_' w.subName  '.*' w.fielmapSpec '.*' '\.nii$'];
        vdm = cellstr(spm_select('FPList', w.fmapPath, expReg));  % vdm (voxel deplacement map) file or phase map
        
        % Get EPI raw files
        f = spm_select('ExtFPList',  w.funcPath, ['^' w.subName  '_' w.task  '.*' w.sessions{j} '_bold\.nii$'], Inf);        

        matlabbatch{1}.spm.spatial.realignunwarp.data(j).scans     = cellstr(f); 
        matlabbatch{1}.spm.spatial.realignunwarp.data(j).pmscan    = vdm;            
    end             

    matlabbatch{1}.spm.spatial.realignunwarp.eoptions.quality = 0.9;
    matlabbatch{1}.spm.spatial.realignunwarp.eoptions.sep = 2.5;
    matlabbatch{1}.spm.spatial.realignunwarp.eoptions.fwhm = 5; 
    matlabbatch{1}.spm.spatial.realignunwarp.eoptions.rtm = 1;
    matlabbatch{1}.spm.spatial.realignunwarp.eoptions.einterp = 2; % 2nd degree Bspline (default value)
    matlabbatch{1}.spm.spatial.realignunwarp.eoptions.ewrap = [0 0 0];      
    matlabbatch{1}.spm.spatial.realignunwarp.eoptions.weight = '';
    matlabbatch{1}.spm.spatial.realignunwarp.uweoptions.basfcn = [12 12];
    matlabbatch{1}.spm.spatial.realignunwarp.uweoptions.regorder = 1;
    matlabbatch{1}.spm.spatial.realignunwarp.uweoptions.lambda = 100000;
    matlabbatch{1}.spm.spatial.realignunwarp.uweoptions.jm = 0;
    matlabbatch{1}.spm.spatial.realignunwarp.uweoptions.fot = [4 5];
    matlabbatch{1}.spm.spatial.realignunwarp.uweoptions.sot = [];
    matlabbatch{1}.spm.spatial.realignunwarp.uweoptions.uwfwhm = 4;
    matlabbatch{1}.spm.spatial.realignunwarp.uweoptions.rem = 1;
    matlabbatch{1}.spm.spatial.realignunwarp.uweoptions.noi = 5;
    matlabbatch{1}.spm.spatial.realignunwarp.uweoptions.expround = 'Average';
    matlabbatch{1}.spm.spatial.realignunwarp.uwroptions.uwwhich = [2 1];
    matlabbatch{1}.spm.spatial.realignunwarp.uwroptions.rinterp = 4;    %   % 4th degree Bspline (default value)
    matlabbatch{1}.spm.spatial.realignunwarp.uwroptions.wrap = [0 0 0];
    matlabbatch{1}.spm.spatial.realignunwarp.uwroptions.mask = 1;
    matlabbatch{1}.spm.spatial.realignunwarp.uwroptions.prefix = 'u';
    
    save(fullfile(w.subPath, 'SPM12_matlabbatch_2_Realign&Unwarp.mat'),'matlabbatch');
    
    spm_jobman('run',matlabbatch);       
end   

function DoCoregister(w)

    % Get T1 structural file
    a = spm_select('FPList', w.anatPath, ['^' w.subName '.*T1w\.nii$']); 
     
    % Get mean realigned and unwarped EPI
    meanUnwarp = spm_select('FPList', w.funcPath, ['^meanu' w.subName  '_' w.task  '.*\.nii$']); 
   
    clear matlabbatch
    matlabbatch{1}.spm.spatial.coreg.estimate.ref = cellstr(meanUnwarp);
    matlabbatch{1}.spm.spatial.coreg.estimate.source = cellstr(a);
    matlabbatch{1}.spm.spatial.coreg.estimate.other = {''};
    matlabbatch{1}.spm.spatial.coreg.estimate.eoptions.cost_fun = 'nmi';
    matlabbatch{1}.spm.spatial.coreg.estimate.eoptions.sep = [4 2];
    matlabbatch{1}.spm.spatial.coreg.estimate.eoptions.tol = [0.02 0.02 0.02 0.001 0.001 0.001 0.01 0.01 0.01 0.001 0.001 0.001];
    matlabbatch{1}.spm.spatial.coreg.estimate.eoptions.fwhm = [7 7];
   
	save(fullfile(w.subPath, 'SPM12_matlabbatch_3_Coregister.mat'),'matlabbatch');  
    
    spm_jobman('run',matlabbatch);  
end

function DoSegment(w)

    % Select the T1 image coregistered to unwarped mean functional image
    coregAnat = cellstr(spm_select('FPList', w.anatPath, ['^' w.subName '.*T1w\.nii$'])); 
  
    % Get template of each cerebral tissue
    tmpGM           = {fullfile(spm('Dir'),'tpm', 'TPM.nii,1')};
    tmpWM           = {fullfile(spm('Dir'),'tpm', 'TPM.nii,2')};
    tmpCSF          = {fullfile(spm('Dir'),'tpm', 'TPM.nii,3')};
    tmpBone         = {fullfile(spm('Dir'),'tpm', 'TPM.nii,4')};      
    tmpSoftTissue   = {fullfile(spm('Dir'),'tpm', 'TPM.nii,5')};               
    tmpAirBck       = {fullfile(spm('Dir'),'tpm', 'TPM.nii,6')};        

    clear matlabbatch;                             
    matlabbatch{1}.spm.spatial.preproc.channel.vols = coregAnat;
    matlabbatch{1}.spm.spatial.preproc.channel.biasreg = 0.001; % Bias regularisation light
    matlabbatch{1}.spm.spatial.preproc.channel.biasfwhm = 60;  % 60 mm cutoff
    matlabbatch{1}.spm.spatial.preproc.channel.write = [1 1];     
    matlabbatch{1}.spm.spatial.preproc.tissue(1).tpm = tmpGM;
    matlabbatch{1}.spm.spatial.preproc.tissue(1).ngaus = 1;
    matlabbatch{1}.spm.spatial.preproc.tissue(1).native = [1 0];  %native
    matlabbatch{1}.spm.spatial.preproc.tissue(1).warped = [0 0];  
    matlabbatch{1}.spm.spatial.preproc.tissue(2).tpm = tmpWM;
    matlabbatch{1}.spm.spatial.preproc.tissue(2).ngaus = 1;
    matlabbatch{1}.spm.spatial.preproc.tissue(2).native = [1 0];  %native
    matlabbatch{1}.spm.spatial.preproc.tissue(2).warped = [0 0];
    matlabbatch{1}.spm.spatial.preproc.tissue(3).tpm = tmpCSF;
    matlabbatch{1}.spm.spatial.preproc.tissue(3).ngaus = 2;
    matlabbatch{1}.spm.spatial.preproc.tissue(3).native = [1 0];  %native
    matlabbatch{1}.spm.spatial.preproc.tissue(3).warped = [0 0];
    matlabbatch{1}.spm.spatial.preproc.tissue(4).tpm = tmpBone;
    matlabbatch{1}.spm.spatial.preproc.tissue(4).ngaus = 3;
    matlabbatch{1}.spm.spatial.preproc.tissue(4).native = [1 0];  %native
    matlabbatch{1}.spm.spatial.preproc.tissue(4).warped = [0 0];
    matlabbatch{1}.spm.spatial.preproc.tissue(5).tpm = tmpSoftTissue;
    matlabbatch{1}.spm.spatial.preproc.tissue(5).ngaus = 4;
    matlabbatch{1}.spm.spatial.preproc.tissue(5).native = [1 0];  %native
    matlabbatch{1}.spm.spatial.preproc.tissue(5).warped = [0 0];        
    matlabbatch{1}.spm.spatial.preproc.tissue(6).tpm = tmpAirBck;
    matlabbatch{1}.spm.spatial.preproc.tissue(6).ngaus = 2;
    matlabbatch{1}.spm.spatial.preproc.tissue(6).native = [0 0];
    matlabbatch{1}.spm.spatial.preproc.tissue(6).warped = [0 0];     
    matlabbatch{1}.spm.spatial.preproc.warp.mrf = 1;
    matlabbatch{1}.spm.spatial.preproc.warp.cleanup = 1;
    matlabbatch{1}.spm.spatial.preproc.warp.reg = [0 0.001 0.5 0.05 0.2];
    matlabbatch{1}.spm.spatial.preproc.warp.affreg = 'mni';
    matlabbatch{1}.spm.spatial.preproc.warp.fwhm = 0;
    matlabbatch{1}.spm.spatial.preproc.warp.samp = 2; % better sampling 
    matlabbatch{1}.spm.spatial.preproc.warp.write = [0 1];   %  Forward

    save(fullfile(w.subPath, 'SPM12_matlabbatch_4_Segment.mat'),'matlabbatch'); 
    
    spm_jobman('run',matlabbatch);       
end


function DoNormalise(w)
        
	% Get Field Deformation image
    forwardDeformation = spm_select('FPList', w.anatPath, ['^y_' w.subName '.*T1w\.nii$']);  
    
    % Get coregistered structural image
    coregAnat = spm_select('FPList', w.anatPath, ['^' w.subName '.*T1w\.nii$']);  
    
    % Get vector of voxel dimensions {mm} on structural image
    [BBa, vxa] =  spm_get_bbox(coregAnat);
    
    % Get Sliced EPI images of all sessions
    EPI = {};
    vxb = [];
    % Loop on sessions
    for j=1:numel(w.sessions)      
        % Get EPI Realigned files
        f = spm_select('ExtFPList',  w.funcPath, ['^u' w.subName  '_' w.task  '.*' w.sessions{j} '_bold\.nii$'], Inf); 
        EPI = vertcat(EPI, cellstr(f));  
        
        if isempty(vxb)
            % vector of voxel dimensions {mm} on EPI image
            [BBb, vxb] =  spm_get_bbox(f);
        end
    end
    
    % Get c1  c2  and c3 
    c1 = spm_select('FPList', w.anatPath, ['^c1' w.subName '.*T1w\.nii$']);  
    c2 = spm_select('FPList', w.anatPath, ['^c2' w.subName '.*T1w\.nii$']);    
    c3 = spm_select('FPList', w.anatPath, ['^c3' w.subName '.*T1w\.nii$']);   
    c1c2c3 = vertcat(c1, c2, c3);   
           
    clear matlabbatch;         
    matlabbatch{1}.spm.spatial.normalise.write.subj.def = {forwardDeformation};
    matlabbatch{1}.spm.spatial.normalise.write.subj.resample = {coregAnat};
    matlabbatch{1}.spm.spatial.normalise.write.woptions.bb = NaN(2,3);
    matlabbatch{1}.spm.spatial.normalise.write.woptions.vox = abs(vxa);
    matlabbatch{1}.spm.spatial.normalise.write.woptions.interp = 4;
    
    matlabbatch{2}.spm.spatial.normalise.write.subj.def(1) = {forwardDeformation};
    matlabbatch{2}.spm.spatial.normalise.write.subj.resample = cellstr(EPI);    
    matlabbatch{2}.spm.spatial.normalise.write.woptions.bb = NaN(2,3);
    matlabbatch{2}.spm.spatial.normalise.write.woptions.vox = abs(vxb);
    matlabbatch{2}.spm.spatial.normalise.write.woptions.interp = 4;
    
    matlabbatch{3}.spm.spatial.normalise.write.subj.def(1) = {forwardDeformation};
    matlabbatch{3}.spm.spatial.normalise.write.subj.resample = cellstr(c1c2c3) ;   
    matlabbatch{3}.spm.spatial.normalise.write.woptions.bb = NaN(2,3);
    matlabbatch{3}.spm.spatial.normalise.write.woptions.vox = abs(vxb);
    matlabbatch{3}.spm.spatial.normalise.write.woptions.interp = 4;         

    save(fullfile(w.subPath, 'SPM12_matlabbatch_5_Normalize.mat'),'matlabbatch');   
    
    spm_jobman('run',matlabbatch);  
end

function DoSmooth(w)

    clear matlabbatch;
    EPI = [];
    vxb = [];
    for j=1:numel(w.sessions)    
        % Get Normalized EPI files
        f = spm_select('ExtFPList',  w.funcPath, ['^wu' w.subName  '_' w.task  '.*' w.sessions{j} '_bold\.nii$'], Inf);       
        EPI = vertcat(EPI, cellstr(f));   
        
        if isempty(vxb)
            % vector of voxel dimensions {mm} on EPI image
            [BBb, vxb] =  spm_get_bbox(f);
        end      
        
    end
    matlabbatch{1}.spm.spatial.smooth.data = cellstr(EPI);
    matlabbatch{1}.spm.spatial.smooth.fwhm = [abs(vxb) * 2];
    matlabbatch{1}.spm.spatial.smooth.dtype = 0;
    matlabbatch{1}.spm.spatial.smooth.im = 0;
    matlabbatch{1}.spm.spatial.smooth.prefix = 's';
    
    save(fullfile(w.subPath, 'SPM12_matlabbatch_6_Smooth.mat'),'matlabbatch'); 
        
    spm_jobman('run',matlabbatch);     
end

function DoExplicitMask(w)

    %% Get normalized grey matter tissus
    P = spm_select('FPList', w.anatPath, ['^wc1' w.subName '.*T1w\.nii$']);  
     
    matlabbatch{1}.spm.util.imcalc.input = cellstr(P);
    matlabbatch{1}.spm.util.imcalc.output = fullfile(w.anatPath, 'explicitMask_wc1_03.nii');
    matlabbatch{1}.spm.util.imcalc.outdir = {''};
    matlabbatch{1}.spm.util.imcalc.expression = 'i1>0.3';
    matlabbatch{1}.spm.util.imcalc.options.dmtx = 0;
    matlabbatch{1}.spm.util.imcalc.options.mask = 0;
    matlabbatch{1}.spm.util.imcalc.options.interp = 1;
    matlabbatch{1}.spm.util.imcalc.options.dtype = 4;   
       
    save(fullfile(w.subPath, 'SPM12_matlabbatch_7_Mask.mat'),'matlabbatch'); 

    spm_jobman('run',matlabbatch);     
end


function CREx_fMRI_art_batch(EPI, subName, outputDir)
  
    %%================ Default ART parametres =============================

    ART.global_mean=1;                % global mean type (1: Standard 2: User-defined Mask)
    ART.motion_file_type=0;           % motion file type (0: SPM .txt file 1: FSL .par file 2:Siemens .txt file)
    ART.global_threshold=5;         % threshold for outlier detection based on global signal
    ART.motion_threshold=.9;           % threshold for outlier detection based on motion estimates
    ART.use_diff_motion=1;            % 1: uses scan-to-scan motion to determine outliers; 0: uses absolute motion
    ART.use_diff_global=1;            % 1: uses scan-to-scan global signal change to determine outliers; 0: uses absolute global signal values
    ART.use_norms=1;                  % 1: uses composite motion measure (largest voxel movement) to determine outliers; 0: uses raw motion measures (translation/rotation parameters) 
    ART.mask_file=[];                 % set to user-defined mask file(s) for global signal estimation (if ART.global_mean is set to 2) 

    % % % Options from CONN
    % % % (functional_art) ART thresholds for identifying outlier scans 
    % % % art_thresholds(1): threshold value for global-signal (z-value; default 5) 
    % % % art_thresholds(2): threshold value for subject-motion (mm; default .9) 
    % % % additional options: art_thresholds(3): 1/0 global-signal threshold based on scan-to-scan changes
    % % % in global-BOLD measure (default 1) 
    % % % art_thresholds(4): 1/0 subject-motion threshold based on scan-to-scan changes 
    % % % in subject-motion measure (default 1) 
    % % % art_thresholds(5): 1/0 subject-motion threhsold based on composite-movement 
    % % % measure (default 1) 
    % % % art_thresholds(6): 1/0 force interactive mode (ART gui) (default 0) 
    % % % art_thresholds(7): [only when art_threshold(5)=0] subject-motion threshold 
    % % % based on rotation measure 
    % % % art_thresholds(8): N number of initial scans to be flagged for removal 
    % % % (default 0)
    % % % note: when art_threshold(5)=0, art_threshold(2) defines the threshold based on the translation 
    % % % measure, and art_threhsold(7) defines the threshold based on the rotation measure; otherwise 
    % % % art_threshold(2) defines the (single) threshold based on the composite-motion measure 
    % % % note: the default art_thresholds(1:2) [5 .9] values correspond to the "intermediate" 
    % % % (97th percentile) settings; to use the "conservative" (95th percentile) settings use 
    % % % [3 .5]; to use the "liberal" (99th percentile) settings use [9 2] values instead
    % % % note: art needs subject-motion files to estimate possible outliers. If a 'realignment' 
    % % % first-level covariate exists it will load the subject-motion parameters from that first-
    % % % level covariate; otherwise it will look for a rp_*.txt file (SPM format) in the same 
    % % % folder as the functional data
    % % % note: subject-motion files can be in any of the following formats: a) *.txt file (SPM 
    % % % format; three translation parameters in mm followed by pitch/roll/yaw in radians); 
    % % % b) *.par (FSL format; three Euler angles in radians followed by translation parameters 
    % % % in mm); c) *.siemens.txt (Siemens MotionDetectionParameter.txt format); d) *.deg.txt (same 
    % % % as SPM format but rotations in degrees instead of radians)   

       
    %%================== Create a config file =============================
    % Get the number of sessions
    nSessions = numel(EPI);
    
    % Define the config file
    cfgfile = fullfile(outputDir, [subName '_art_config2020.cfg']);
        
	% Open it and write ART comments and parameters 
    fid=fopen(cfgfile,'wt');
     
    % Comments
    fprintf(fid,'# Automatic script generated by %s\n',mfilename);
    fprintf(fid,'# Users can edit this file and use\n');
    fprintf(fid,'#   art(''sess_file'',''%s'');\n',cfgfile);
    fprintf(fid,'# to launch art using this configuration\n');
        
    % Parameters 
    fprintf(fid,'sessions: %d\n', nSessions);
    fprintf(fid,'global_mean: %d\n', ART.global_mean);
    fprintf(fid,'global_threshold: %f\n', ART.global_threshold);
    fprintf(fid,'motion_threshold: %f\n', ART.motion_threshold);
    fprintf(fid,'motion_file_type: %d\n', ART.motion_file_type);
    fprintf(fid,'motion_fname_from_image_fname: 1\n');
    fprintf(fid,'use_diff_motion: %d\n', ART.use_diff_motion);
    fprintf(fid,'use_diff_global: %d\n', ART.use_diff_global);
    fprintf(fid,'use_norms: %d\n', ART.use_norms);
    fprintf(fid,'output_dir: %s\n', outputDir);        
    if ~isempty(ART.mask_file),fprintf(fid,'mask_file: %s\n',deblank(ART.mask_file(1,:)));end
    fprintf(fid,'end\n');
        
    for iSess=1:nSessions,
        fprintf(fid,'session %d image %s\n',iSess, EPI{iSess});
    end
    fprintf(fid,'end\n');
    
    % Close config file
    fclose(fid);

    %%================== Use ART function  ================================
    % Use ART function to get 'regression' outliers   
    disp(['running subject using config file ',cfgfile]);
    art('sess_file',cfgfile);
    
    % Define a name for the figure
    set(gcf,'name',['subject #',subName]);
    
    %% Save the figure in 2 formats
    saveas(gcf, fullfile(outputDir, [subName '_art_config']), 'png');
    close
    %%
end

